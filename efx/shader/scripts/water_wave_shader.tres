[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D testing;
uniform sampler2D bg : hint_albedo;
uniform sampler2D wave1 : hint_albedo;
uniform sampler2D wave2 : hint_albedo;
uniform sampler2D noise : hint_black_albedo;
uniform float alpha = 0.5;
uniform float zoom = 10.0;
uniform float wave_1_speed = 0.02;
uniform float wave_2_speed = 0.08;
uniform float seed_1 = 0.0;
uniform bool pause = false;


vec2 tile(vec2 _st, float _zoom){
	if (!pause){
	    _st *= _zoom;
	    return fract(_st);
	}
}

float box(vec2 _st, vec2 _size){
	if (!pause){
		_size = vec2(0.5) - _size * 0.5;
	    vec2 uv = smoothstep(_size, _size + vec2(1e-4), _st);
	    uv *= smoothstep(_size,_size + vec2(1e-4), vec2(1.0) - _st);
	    return uv.x * uv.y;
	}
}

float rand(vec2 seed){
    return fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float rand_test(float _time){
	return rand(vec2(_time, 0.0));
}

void fragment(){
	if (!pause){
		vec4 test_texture = texture(testing, UV);
		vec4 color_1 = texture(TEXTURE, UV);
		
		if (test_texture.a > 0.0)
			{
				vec2 st = vec2(UV.x / (SCREEN_PIXEL_SIZE.y / SCREEN_PIXEL_SIZE.x), UV.y);
			    vec3 color = vec3(0.0);
				st = tile(st, zoom);
				
				float time_test = floor(TIME / seed_1);
				float alpha_test = abs( sin(TIME * 0.5 * seed_1) * (rand_test(time_test) * 0.6 + 0.6) * 0.35) + 0.3;
				
				vec2 distortedUV = SCREEN_UV + texture(TEXTURE, UV).r * 0.05;
				
				color += texture(bg, st).rgb;
				color += alpha_test * texture(wave1, vec2(st.x + TIME * wave_1_speed, st.y + 0.2  + sin(TIME * 1.0) * 0.06 )).rgb / 0.5 * texture(noise,vec2(st.x + cos(TIME * 0.5),st.y)).rgb;
				color += alpha_test * texture(wave2, vec2(st.x - TIME * wave_2_speed, st.y * 5.0 )).rgb / 0.5 * texture(noise,vec2(st.x, st.y - sin(TIME * 0.5))).rgb;
				
				
				COLOR = vec4(color, 1.0);
			}
		else
		{
			COLOR = color_1;
		}
	}
}

"
